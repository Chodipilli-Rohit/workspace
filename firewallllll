Below is a Python-based basic firewall with IP blocking that meets the specified requirements. It monitors incoming IPs, blocks unauthorized addresses based on defined allow/deny rules, detects and logs multiple failed connection attempts, and provides real-time connection monitoring for home lab use. The implementation uses `scapy` for packet sniffing and `iptables` for IP blocking, with logging for tracking activities. This is designed for educational purposes and should be tested in a controlled environment (e.g., a home lab or virtual machine) with proper authorization.

```python
import scapy.all as scapy
import subprocess
import logging
import time
from datetime import datetime
from collections import defaultdict
import sys
import os

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('firewall.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

class BasicFirewall:
    def __init__(self, interface, config_file="firewall_rules.txt", max_attempts=5, block_duration=300):
        self.interface = interface
        self.config_file = config_file
        self.max_attempts = max_attempts  # Max failed attempts before blocking
        self.block_duration = block_duration  # Block duration in seconds
        self.allow_list = set()
        self.deny_list = set()
        self.failed_attempts = defaultdict(list)  # Track failed attempts with timestamps
        self.blocked_ips = {}  # Track blocked IPs with expiration time
        self.load_rules()

    def load_rules(self):
        """Load allow/deny rules from config file."""
        try:
            if not os.path.exists(self.config_file):
                logging.warning(f"Config file {self.config_file} not found. Creating default rules.")
                with open(self.config_file, 'w') as f:
                    f.write("# Allow List\nallow 192.168.1.0/24\n# Deny List\ndeny 10.0.0.0/8\n")
            
            with open(self.config_file, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line.startswith('#') or not line:
                        continue
                    rule_type, ip_range = line.split()
                    if rule_type.lower() == 'allow':
                        self.allow_list.add(ip_range)
                    elif rule_type.lower() == 'deny':
                        self.deny_list.add(ip_range)
            logging.info("Loaded rules: %s allow, %s deny", self.allow_list, self.deny_list)
        except Exception as e:
            logging.error("Error loading rules: %s", e)
            sys.exit(1)

    def is_ip_in_range(self, ip, ip_range):
        """Check if an IP is within a CIDR range."""
        try:
            ip_addr = scapy.IP(dst=ip).dst
            network = scapy.IP(dst=ip_range).dst
            return ip_addr in network
        except:
            return False

    def block_ip(self, ip):
        """Block an IP using iptables."""
        try:
            subprocess.run(['sudo', 'iptables', '-A', 'INPUT', '-s', ip, '-j', 'DROP'], check=True)
            self.blocked_ips[ip] = time.time() + self.block_duration
            logging.warning("Blocked IP: %s for %d seconds", ip, self.block_duration)
        except subprocess.CalledProcessError as e:
            logging.error("Failed to block IP %s: %s", ip, e)

    def unblock_ip(self, ip):
        """Unblock an IP using iptables."""
        try:
            subprocess.run(['sudo', 'iptables', '-D', 'INPUT', '-s', ip, '-j', 'DROP'], check=True)
            del self.blocked_ips[ip]
            logging.info("Unblocked IP: %s", ip)
        except subprocess.CalledProcessError as e:
            logging.error("Failed to unblock IP %s: %s", ip, e)

    def check_blocked_ips(self):
        """Check and unblock IPs whose block duration has expired."""
        current_time = time.time()
        for ip, expiry in list(self.blocked_ips.items()):
            if current_time > expiry:
                self.unblock_ip(ip)

    def process_packet(self, packet):
        """Process incoming packets and apply firewall rules."""
        if not packet.haslayer(scapy.IP):
            return

        src_ip = packet[scapy.IP].src
        self.check_blocked_ips()

        # Check if IP is explicitly allowed
        for ip_range in self.allow_list:
            if self.is_ip_in_range(src_ip, ip_range):
                logging.info("Allowed packet from %s", src_ip)
                return

        # Check if IP is explicitly denied
        for ip_range in self.deny_list:
            if self.is_ip_in_range(src_ip, ip_range):
                logging.warning("Denied packet from %s (in deny list)", src_ip)
                self.block_ip(src_ip)
                return

        # Track failed attempts for non-allowed IPs
        current_time = time.time()
        self.failed_attempts[src_ip].append(current_time)
        
        # Remove attempts older than 60 seconds
        self.failed_attempts[src_ip] = [t for t in self.failed_attempts[src_ip] if current_time - t < 60]
        
        # Block IP if too many failed attempts
        if len(self.failed_attempts[src_ip]) > self.max_attempts:
            logging.warning("Too many failed attempts from %s (%d attempts)", src_ip, len(self.failed_attempts[src_ip]))
            self.block_ip(src_ip)
            self.failed_attempts[src_ip] = []  # Reset attempts after blocking
        else:
            logging.info("Packet from %s (attempt %d/%d)", src_ip, len(self.failed_attempts[src_ip]), self.max_attempts)

    def start_monitoring(self):
        """Start real-time packet monitoring."""
        logging.info("Starting firewall on interface %s", self.interface)
        try:
            scapy.sniff(iface=self.interface, prn=self.process_packet, store=False)
        except Exception as e:
            logging.error("Error in packet monitoring: %s", e)
            sys.exit(1)

def main():
    if len(sys.argv) != 2:
        print("Usage: sudo python basic_firewall.py <interface>")
        sys.exit(1)

    interface = sys.argv[1]
    firewall = BasicFirewall(interface)
    firewall.start_monitoring()

if __name__ == "__main__":
    main()

```



# Basic Firewall with IP Blocking Documentation

## Overview
This project implements a Python-based firewall for home lab use, designed to monitor incoming IP traffic, block unauthorized addresses based on defined rules, detect multiple failed connection attempts, and log activities. It uses `scapy` for packet sniffing and `iptables` for IP blocking, with real-time monitoring and logging capabilities.

**Warning**: This is for educational purposes only and requires root privileges (`sudo`) to run. Test in a controlled environment (e.g., virtual machine) with proper authorization to avoid network disruptions.

## Features
1. **IP Monitoring and Blocking**: Monitors incoming packets and blocks IPs based on allow/deny rules or excessive failed attempts.
2. **Rule-Based Access Control**: Supports allow/deny lists defined in a configuration file (`firewall_rules.txt`).
3. **Failed Attempt Detection**: Tracks and logs multiple failed connection attempts, blocking IPs after a threshold (default: 5 attempts in 60 seconds).
4. **Real-Time Monitoring**: Continuously monitors network traffic on a specified interface.
5. **Logging**: Logs all actions (allowed, denied, blocked, unblocked) to `firewall.log` and console for auditing.
6. **Temporary Blocking**: Blocks IPs for a configurable duration (default: 300 seconds).

## Requirements
- **Operating System**: Linux (due to `iptables` dependency)
- **Python Libraries**: `scapy` (`pip install scapy`)
- **Privileges**: Root access (`sudo`) for packet sniffing and `iptables` modifications
- **Test Environment**: Home lab or virtual machine (e.g., VirtualBox, VMware)

## Configuration
- **Rules File**: `firewall_rules.txt` defines allow/deny rules in the format:
  ```
  # Allow List
  allow 192.168.1.0/24
  # Deny List
  deny 10.0.0.0/8
  ```
- **Parameters**:
  - `max_attempts`: Maximum failed attempts before blocking (default: 5).
  - `block_duration`: Duration to block an IP (default: 300 seconds).

## Usage
1. Install dependencies: `pip install scapy`
2. Create or edit `firewall_rules.txt` with desired allow/deny rules.
3. Run the script with root privileges:
   ```bash
   sudo python basic_firewall.py <interface>
   ```
   Example: `sudo python basic_firewall.py eth0`
4. Monitor logs in `firewall.log` and console for real-time activity.
5. Stop the script with `Ctrl+C`.

## How It Works
1. **Initialization**: Loads allow/deny rules from `firewall_rules.txt`.
2. **Packet Monitoring**: Uses `scapy` to sniff packets on the specified interface.
3. **Rule Enforcement**:
   - Allows packets from IPs in the allow list.
   - Denies and blocks packets from IPs in the deny list.
   - Tracks failed attempts for non-allowed IPs and blocks after exceeding `max_attempts`.
4. **Blocking Mechanism**: Uses `iptables` to drop packets from blocked IPs.
5. **Expiration**: Automatically unblocks IPs after `block_duration`.
6. **Logging**: Records all actions (allowed, denied, blocked, unblocked) with timestamps.

## Defense Mechanisms
- **Allow/Deny Rules**: Restrict access to trusted IP ranges, reducing attack surface.
- **Rate Limiting**: Detects and blocks IPs with excessive connection attempts, mitigating brute-force attacks.
- **Logging**: Enables auditing and post-incident analysis.
- **Temporary Blocking**: Prevents permanent lockouts while maintaining security.

## Limitations
- Limited to Linux due to `iptables` dependency.
- Basic detection for failed attempts (based on packet frequency, not protocol-specific logic).
- Requires root privileges, posing risks if misconfigured.
- Does not handle advanced attacks (e.g., DDoS, spoofing) or application-layer vulnerabilities.

## Ethical Considerations
- Use only in authorized environments (e.g., home lab or with explicit permission).
- Unauthorized network monitoring or blocking may violate laws or policies.

## Future Improvements
- Add protocol-specific filtering (e.g., TCP, UDP).
- Implement persistent rule storage in a database.
- Enhance detection with machine learning for anomaly-based blocking.
- Support cross-platform blocking (e.g., Windows Firewall).



### Instructions for Use
1. **Setup Environment**:
   - Use a Linux-based virtual machine or home lab setup (e.g., Ubuntu in VirtualBox).
   - Ensure the network interface (e.g., `eth0`, `wlan0`) is correctly configured.
2. **Install Dependencies**:
   - Install `scapy`: `pip install scapy`
   - Ensure `iptables` is installed (default on most Linux distributions).
3. **Configure Rules**:
   - Edit `firewall_rules.txt` to specify allow/deny IP ranges in CIDR notation (e.g., `192.168.1.0/24`).
   - Example rule file:
     ```
     # Allow List
     allow 192.168.1.0/24
     # Deny List
     deny 10.0.0.0/8
     ```
4. **Run the Firewall**:
   - Execute with root privileges: `sudo python basic_firewall.py eth0`
   - The script will monitor packets, apply rules, and log activities.
5. **Monitor Output**:
   - Check `firewall.log` for detailed logs.
   - Console output provides real-time updates on allowed/denied packets and blocked IPs.
6. **Stop the Firewall**:
   - Press `Ctrl+C` to stop monitoring.
   - Manually clear `iptables` rules if needed: `sudo iptables -F`

### Notes
- **Functionality**: The firewall monitors incoming packets, applies allow/deny rules, tracks failed attempts, and blocks IPs using `iptables`. It logs all actions for transparency.
- **Security**: Temporary blocking and rate-limiting protect against unauthorized access while avoiding permanent lockouts.
- **Testing**: Test in a controlled environment with simulated traffic (e.g., `nmap` or `hping3`) to verify blocking and logging.
- **Ethical Use**: Ensure you have permission to monitor and block traffic on the target network.
- **Extensibility**: The script can be extended to include protocol filtering, GUI for rule management, or integration with external threat intelligence feeds.

This project fulfills the requirements by providing a Python-based firewall with IP blocking, rule-based access control, failed attempt detection, and real-time monitoring, suitable for a home lab environment.
